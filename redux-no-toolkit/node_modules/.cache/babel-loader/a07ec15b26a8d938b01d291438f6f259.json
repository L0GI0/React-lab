{"ast":null,"code":"import { ActionTypes } from \"./constants\"; // a global factory that you  send a request to, and depent on that request, it\n// updates a state, depending of the type of a request\n// big objects with many properties, this is what redux store is, object with a lot of preperties and these\n// properties are object, whitch can hold other project, numbers, string, many many things\n\nconst defaultState = {\n  users: null\n}; //reducer is simple a function\n// store is combination of reducers, the are combined togeter by using a special function from redux library\n//put store on the 'root' lever of the app\n//takes care of state managment and state changes, the action is pretty mutch what request it has received, is composed of the payload and type of action\n// payload is part of the store that it needs to be updated\n\nexport default function userPageReducer(state = defaultState, action) {\n  //state changes are based on the type of action. Thats handled inside the switch. Every reduces would look like this\n  // good pratice is to use reducer for every page\n  switch (action.type) {\n    case ActionTypes.SET_USER:\n      return { ...state,\n        user: action.payload\n      };\n    // ...state always needs to apper, without spread operator all previous state will be lost\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/LOGIO/Desktop/Projects/redux-no-toolkit/src/containers/UserPage/reducer.js"],"names":["ActionTypes","defaultState","users","userPageReducer","state","action","type","SET_USER","user","payload"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B,C,CACA;AACA;AAEA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB,C,CAIA;AAEA;AACA;AAEA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,KAAK,GAAGH,YAAjC,EAA+CI,MAA/C,EAAuD;AACpE;AACA;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACO,QAAjB;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYI,QAAAA,IAAI,EAAEH,MAAM,CAACI;AAAzB,OAAP;AAA2C;;AAC7C;AACE,aAAOL,KAAP;AAJJ;AAMD","sourcesContent":["import { ActionTypes } from \"./constants\";\r\n// a global factory that you  send a request to, and depent on that request, it\r\n// updates a state, depending of the type of a request\r\n\r\n// big objects with many properties, this is what redux store is, object with a lot of preperties and these\r\n// properties are object, whitch can hold other project, numbers, string, many many things\r\n\r\nconst defaultState = {\r\n  users: null,\r\n};\r\n\r\n//reducer is simple a function\r\n\r\n// store is combination of reducers, the are combined togeter by using a special function from redux library\r\n//put store on the 'root' lever of the app\r\n\r\n//takes care of state managment and state changes, the action is pretty mutch what request it has received, is composed of the payload and type of action\r\n// payload is part of the store that it needs to be updated\r\nexport default function userPageReducer(state = defaultState, action) {\r\n  //state changes are based on the type of action. Thats handled inside the switch. Every reduces would look like this\r\n  // good pratice is to use reducer for every page\r\n  switch (action.type) {\r\n    case ActionTypes.SET_USER:\r\n      return { ...state, user: action.payload }; // ...state always needs to apper, without spread operator all previous state will be lost\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}